/**
 * Copyright (2023, ) Institute of Software, Chinese Academy of Sciences
 */
package io.github.kubesys.devfrk.spring.orm.tools;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import org.springframework.context.annotation.ComponentScan;

import io.github.kubesys.devfrk.spring.utils.ClassUtils;
import jakarta.persistence.Entity;

/**
 * @author wuheng@iscas.ac.cn
 * @since 2.0.0
 * 
 */

public class OrmGenerator {

	protected List<String> pkgs = new ArrayList<>();
	
	protected static String ORM_TEMP = "/**\r\n"
			+ " * Copyright (2023, ) Institute of Software, Chinese Academy of Sciences\r\n"
			+ " */\r\n"
			+ "package #PACKAGE_NAME#;\r\n"
			+ "\r\n"
			+ "import org.springframework.data.repository.CrudRepository;\r\n"
			+ "import org.springframework.data.repository.PagingAndSortingRepository;\r\n"
			+ "import org.springframework.stereotype.Repository;\r\n"
			+ "\r\n"
			+ "\r\n"
			+ "/**\r\n"
			+ " * This code is generated by httpfrk-springboot-orm project\r\n"
			+ " *\r\n"
			+ " */\r\n"
			+ "@Repository\r\n"
			+ "public interface #CLASS_NAME#Orm extends CrudRepository<#CLASS_NAME#, Long>, PagingAndSortingRepository<#CLASS_NAME#, Long> {\r\n"
			+ "\r\n"
			+ "}";
	
	/**
	 * @param HttpServer
	 */
	public OrmGenerator(Class<?> clz) {
		ComponentScan[] css = clz.getAnnotationsByType(ComponentScan.class);
		check(css, "missing 'ComponentScan'");
		
		for (ComponentScan cs: css) {
			String[] vs = cs.value();
			check(vs, "missing 'value' or using 'value' replaces 'basePackages'");
			pkgs.addAll(Arrays.asList(vs));
		}
	}
	
	@SuppressWarnings("unchecked")
	public void generate() throws IOException {
		Set<Class<?>> clzSet = ClassUtils.scan(pkgs.toArray(
					new String[pkgs.size()]), Entity.class);
		
		for (Class<?> clz : clzSet) {
			String clzJava = ORM_TEMP.replaceAll("#PACKAGE_NAME#", clz.getPackageName())
									.replaceAll("#CLASS_NAME#", clz.getSimpleName());

			FileWriter fw = new FileWriter(getFile(clz));
			fw.write(clzJava);
			fw.flush();
			fw.close();
		}
	}
	
	File getFile(Class<?> clz) {
		String clzPath = clz.getResource("").getFile().replace("\\\\", "/");
		String realPath = clzPath.contains("test-classes") ?
				clzPath.replace("target/test-classes", "src/test/java") :
					clzPath.replace("target/classes", "src/main/java");
		return new File(realPath,  clz.getSimpleName() + "Orm.java");
	}
	
	public void check(Object obj, String err) {
		if (obj == null) {
			System.err.println(err);
			System.exit(1);
		}
	}
	
}